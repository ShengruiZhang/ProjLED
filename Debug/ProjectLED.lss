
ProjectLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000054e  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080011e  0080011e  00000600  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e0c  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008bd  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d7  00000000  00000000  00001dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00002498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044b  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000445  00000000  00000000  000029e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  9e:	0c 94 a5 02 	jmp	0x54a	; 0x54a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PinState>:
static uint PinState()
{
	// Check the current pin state

	// Check for press
	if (!(PIND & (1 << PIND4)))
  a6:	4c 99       	sbic	0x09, 4	; 9
  a8:	18 c0       	rjmp	.+48     	; 0xda <PinState+0x34>
	{
		++counter;
  aa:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <counter>
  ae:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <counter+0x1>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <counter+0x1>
  b8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <counter>

		if (counter > 250)
  bc:	8b 3f       	cpi	r24, 0xFB	; 251
  be:	91 05       	cpc	r25, r1
  c0:	20 f1       	brcs	.+72     	; 0x10a <PinState+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	84 e6       	ldi	r24, 0x64	; 100
  c6:	94 e0       	ldi	r25, 0x04	; 4
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <PinState+0x22>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <PinState+0x2c>
  d2:	00 00       	nop
		{
			_delay_ms(90);
			// Reset counter
			//counter = 0;
			return Button_Pressed;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	08 95       	ret
		}
	}
	else // Check for release
	{
		++counter_release;
  da:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <counter_release>
  de:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <counter_release+0x1>
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <counter_release+0x1>
  e8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <counter_release>

		if (counter_release > 250)
  ec:	8b 3f       	cpi	r24, 0xFB	; 251
  ee:	91 05       	cpc	r25, r1
  f0:	78 f0       	brcs	.+30     	; 0x110 <PinState+0x6a>
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	84 e6       	ldi	r24, 0x64	; 100
  f6:	94 e0       	ldi	r25, 0x04	; 4
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <PinState+0x52>
 100:	00 c0       	rjmp	.+0      	; 0x102 <PinState+0x5c>
 102:	00 00       	nop
		{
			_delay_ms(90);
			// Reset counter
			//counter_release = 0;
			return Button_Released;
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	08 95       	ret
		}
	}
	return 0;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
}
 114:	08 95       	ret

00000116 <Mode_Blink>:

static uint Mode_Blink(uint times)
{
	for (uint k = 0; k < times; ++k)
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	d9 f0       	breq	.+54     	; 0x150 <Mode_Blink+0x3a>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTB |= (1 << PORTB5);
 11e:	2d 9a       	sbi	0x05, 5	; 5
 120:	4f ef       	ldi	r20, 0xFF	; 255
 122:	50 e7       	ldi	r21, 0x70	; 112
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	41 50       	subi	r20, 0x01	; 1
 128:	50 40       	sbci	r21, 0x00	; 0
 12a:	60 40       	sbci	r22, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <Mode_Blink+0x10>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <Mode_Blink+0x1a>
 130:	00 00       	nop
		_delay_ms(50);
		PORTB &= ~(1 << PORTB5);
 132:	2d 98       	cbi	0x05, 5	; 5
 134:	4f ef       	ldi	r20, 0xFF	; 255
 136:	5a e6       	ldi	r21, 0x6A	; 106
 138:	63 e0       	ldi	r22, 0x03	; 3
 13a:	41 50       	subi	r20, 0x01	; 1
 13c:	50 40       	sbci	r21, 0x00	; 0
 13e:	60 40       	sbci	r22, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <Mode_Blink+0x24>
 142:	00 c0       	rjmp	.+0      	; 0x144 <Mode_Blink+0x2e>
 144:	00 00       	nop
	return 0;
}

static uint Mode_Blink(uint times)
{
	for (uint k = 0; k < times; ++k)
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	82 17       	cp	r24, r18
 14c:	93 07       	cpc	r25, r19
 14e:	39 f7       	brne	.-50     	; 0x11e <Mode_Blink+0x8>
		_delay_ms(50);
		PORTB &= ~(1 << PORTB5);
		_delay_ms(70);
	}
	return 0;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	08 95       	ret

00000156 <__vector_5>:
static uint Mode_Blink(uint times);

uint power_on = 0;

ISR(PCINT2_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
	if (mode == PWM_Rotary)
 178:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <mode>
 17c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <mode+0x1>
 180:	89 2b       	or	r24, r25
 182:	09 f0       	breq	.+2      	; 0x186 <__vector_5+0x30>
 184:	52 c0       	rjmp	.+164    	; 0x22a <__vector_5+0xd4>
	{
		unsigned char result = rotary_process();
 186:	0e 94 84 02 	call	0x508	; 0x508 <rotary_process>

		if (result == DIR_NONE) {
 18a:	88 23       	and	r24, r24
 18c:	e9 f1       	breq	.+122    	; 0x208 <__vector_5+0xb2>
			
		}
		else if (result == DIR_CW) {
 18e:	80 31       	cpi	r24, 0x10	; 16
 190:	f1 f4       	brne	.+60     	; 0x1ce <__vector_5+0x78>
			// Only increment if under max
			if (DutyCycle < MAX_10)
 192:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 196:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 19a:	8f 3f       	cpi	r24, 0xFF	; 255
 19c:	93 40       	sbci	r25, 0x03	; 3
 19e:	48 f4       	brcc	.+18     	; 0x1b2 <__vector_5+0x5c>
			/* 0x03ff  1023*/
			{
				DutyCycle += INCREMENT;
 1a0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 1a4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 1a8:	44 96       	adiw	r24, 0x14	; 20
 1aa:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <DutyCycle+0x1>
 1ae:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <DutyCycle>
			}

			// Set to max if it is already max out
			if (DutyCycle > MAX_10)
 1b2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 1b6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 1ba:	81 15       	cp	r24, r1
 1bc:	94 40       	sbci	r25, 0x04	; 4
 1be:	20 f1       	brcs	.+72     	; 0x208 <__vector_5+0xb2>
			{
				DutyCycle = MAX_10 - 5;
 1c0:	8a ef       	ldi	r24, 0xFA	; 250
 1c2:	93 e0       	ldi	r25, 0x03	; 3
 1c4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <DutyCycle+0x1>
 1c8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <DutyCycle>
 1cc:	1d c0       	rjmp	.+58     	; 0x208 <__vector_5+0xb2>
			}
		}
		else if (result == DIR_CCW) {
 1ce:	80 32       	cpi	r24, 0x20	; 32
 1d0:	d9 f4       	brne	.+54     	; 0x208 <__vector_5+0xb2>
			// Only decrease if hasn't bottom out
			if (DutyCycle > 1)
 1d2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 1d6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 1da:	02 97       	sbiw	r24, 0x02	; 2
 1dc:	48 f0       	brcs	.+18     	; 0x1f0 <__vector_5+0x9a>
			{
				DutyCycle -= INCREMENT;
 1de:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 1e2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 1e6:	44 97       	sbiw	r24, 0x14	; 20
 1e8:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <DutyCycle+0x1>
 1ec:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <DutyCycle>
			}

			// Set to 0 if it is already bottom out
			if (DutyCycle <= 0)
 1f0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 1f4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 1f8:	89 2b       	or	r24, r25
 1fa:	31 f4       	brne	.+12     	; 0x208 <__vector_5+0xb2>
			{
				DutyCycle = 1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <DutyCycle+0x1>
 204:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <DutyCycle>
			}
		}
		OCR1A = DutyCycle;
 208:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 20c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 210:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 214:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = DutyCycle;
 218:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 21c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 220:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 224:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 228:	27 c0       	rjmp	.+78     	; 0x278 <__vector_5+0x122>
	}
	else if (mode == BLINK)
 22a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <mode>
 22e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <mode+0x1>
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	09 f5       	brne	.+66     	; 0x278 <__vector_5+0x122>
	{
		unsigned char result = rotary_process();
 236:	0e 94 84 02 	call	0x508	; 0x508 <rotary_process>

		if (result == DIR_NONE) {
 23a:	88 23       	and	r24, r24
 23c:	e9 f0       	breq	.+58     	; 0x278 <__vector_5+0x122>
			
		}
		else if (result == DIR_CW) {
 23e:	80 31       	cpi	r24, 0x10	; 16
 240:	51 f4       	brne	.+20     	; 0x256 <__vector_5+0x100>
			Speed += 2;
 242:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Speed>
 246:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Speed+0x1>
 24a:	02 96       	adiw	r24, 0x02	; 2
 24c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Speed+0x1>
 250:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Speed>
 254:	11 c0       	rjmp	.+34     	; 0x278 <__vector_5+0x122>
		}
		else if (result == DIR_CCW) {
 256:	80 32       	cpi	r24, 0x20	; 32
 258:	79 f4       	brne	.+30     	; 0x278 <__vector_5+0x122>
			if (Speed > 0) Speed -= 2;
 25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Speed>
 25e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Speed+0x1>
 262:	89 2b       	or	r24, r25
 264:	49 f0       	breq	.+18     	; 0x278 <__vector_5+0x122>
 266:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Speed>
 26a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Speed+0x1>
 26e:	02 97       	sbiw	r24, 0x02	; 2
 270:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Speed+0x1>
 274:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Speed>
		}
	}
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <main>:

int main(void)
{
	// Set MOSFET to high to turn off LED
	DDRB |= (1 << DDB1);
 29a:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1 << DDB2);
 29c:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << PORTB1) | (1 << PORTB2);
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	86 60       	ori	r24, 0x06	; 6
 2a2:	85 b9       	out	0x05, r24	; 5
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	83 e2       	ldi	r24, 0x23	; 35
 2a8:	94 ef       	ldi	r25, 0xF4	; 244
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x10>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x1a>
 2b4:	00 00       	nop
	_delay_ms(5000);

	// Press the button to turn on
	init_button();
 2b6:	0e 94 a1 02 	call	0x542	; 0x542 <init_button>
	// Set pin 5 as output, status LED
	DDRB |= (1 << DDB5);
 2ba:	25 9a       	sbi	0x04, 5	; 4
	while (1)
	{
		if (!(PIND & (1 << PIND4)))
 2bc:	4c 99       	sbic	0x09, 4	; 9
 2be:	0f c0       	rjmp	.+30     	; 0x2de <main+0x44>
		{
			++power_on;
 2c0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 2c4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 2ce:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 2d2:	ef e9       	ldi	r30, 0x9F	; 159
 2d4:	ff e0       	ldi	r31, 0x0F	; 15
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <main+0x3c>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x42>
 2dc:	00 00       	nop
			//Mode_Blink(1);
			_delay_ms(1);

		}

		if (power_on > 100)
 2de:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 2e2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 2e6:	85 36       	cpi	r24, 0x65	; 101
 2e8:	91 05       	cpc	r25, r1
 2ea:	40 f3       	brcs	.-48     	; 0x2bc <main+0x22>
		{
			break;
		}
	}
	PORTB |= (1 << PORTB5);
 2ec:	2d 9a       	sbi	0x05, 5	; 5
 2ee:	ff ef       	ldi	r31, 0xFF	; 255
 2f0:	23 ed       	ldi	r18, 0xD3	; 211
 2f2:	80 e3       	ldi	r24, 0x30	; 48
 2f4:	f1 50       	subi	r31, 0x01	; 1
 2f6:	20 40       	sbci	r18, 0x00	; 0
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x5a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x64>
 2fe:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(1 << PORTB5);
 300:	2d 98       	cbi	0x05, 5	; 5
	//_delay_ms(1000);

	_PWM_16();
 302:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_PWM_16>
	rotary_init();
 306:	0e 94 74 02 	call	0x4e8	; 0x4e8 <rotary_init>

	// Enable global interrupts
	sei();
 30a:	78 94       	sei
	
	// Initialize the duty cycle
	// to lowest, to avoid frying 
	// the red LEDs
	OCR1A = 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 314:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 1;
 318:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 31c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 320:	9f ef       	ldi	r25, 0xFF	; 255
 322:	e3 ed       	ldi	r30, 0xD3	; 211
 324:	f0 e3       	ldi	r31, 0x30	; 48
 326:	91 50       	subi	r25, 0x01	; 1
 328:	e0 40       	sbci	r30, 0x00	; 0
 32a:	f0 40       	sbci	r31, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x8c>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x96>
 330:	00 00       	nop
				_delay_ms(80);
				while(!PinState())
				{
					DutyCycle += Speed;
					if (DutyCycle > 0x03ff) DutyCycle = 0;
					OCR1A = DutyCycle;
 332:	08 e8       	ldi	r16, 0x88	; 136
 334:	10 e0       	ldi	r17, 0x00	; 0
					OCR1B = DutyCycle;
 336:	ca e8       	ldi	r28, 0x8A	; 138
 338:	d0 e0       	ldi	r29, 0x00	; 0
			case FULL_ON:

				// Blink LED
				Mode_Blink(FULL_ON+1);

				OCR1A = (0.9 * 0x03ff);
 33a:	0f 2e       	mov	r0, r31
 33c:	f8 e9       	ldi	r31, 0x98	; 152
 33e:	ef 2e       	mov	r14, r31
 340:	f3 e0       	ldi	r31, 0x03	; 3
 342:	ff 2e       	mov	r15, r31
 344:	f0 2d       	mov	r31, r0

	_delay_ms(1000);

	while(1)
	{
		if (PinState())
 346:	0e 94 53 00 	call	0xa6	; 0xa6 <PinState>
 34a:	89 2b       	or	r24, r25
 34c:	49 f0       	breq	.+18     	; 0x360 <main+0xc6>
 34e:	2f ef       	ldi	r18, 0xFF	; 255
 350:	84 e3       	ldi	r24, 0x34	; 52
 352:	9c e0       	ldi	r25, 0x0C	; 12
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0xba>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0xc4>
 35e:	00 00       	nop
		//{
			//PORTB &= ~(1 << PORTB5);
			//_delay_ms(30);
		//}

		if (mode > 2) mode = 0;
 360:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <mode>
 364:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <mode+0x1>
 368:	03 97       	sbiw	r24, 0x03	; 3
 36a:	20 f0       	brcs	.+8      	; 0x374 <main+0xda>
 36c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <mode+0x1>
 370:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <mode>

		// Choose corresponding function
		switch(mode)
 374:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <mode>
 378:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <mode+0x1>
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	91 05       	cpc	r25, r1
 380:	09 f4       	brne	.+2      	; 0x384 <main+0xea>
 382:	51 c0       	rjmp	.+162    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 384:	10 f1       	brcs	.+68     	; 0x3ca <main+0x130>
 386:	02 97       	sbiw	r24, 0x02	; 2
 388:	f1 f6       	brne	.-68     	; 0x346 <main+0xac>
		{
			case FULL_ON:

				// Blink LED
				Mode_Blink(FULL_ON+1);
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 8b 00 	call	0x116	; 0x116 <Mode_Blink>

				OCR1A = (0.9 * 0x03ff);
 392:	f8 01       	movw	r30, r16
 394:	f1 82       	std	Z+1, r15	; 0x01
 396:	e0 82       	st	Z, r14
				OCR1B = (0.9 * 0x03ff);
 398:	f9 82       	std	Y+1, r15	; 0x01
 39a:	e8 82       	st	Y, r14

				while(!PinState())
 39c:	0e 94 53 00 	call	0xa6	; 0xa6 <PinState>
 3a0:	89 2b       	or	r24, r25
 3a2:	e1 f3       	breq	.-8      	; 0x39c <main+0x102>
				{
					
				}
				++mode;
 3a4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <mode>
 3a8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <mode+0x1>
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <mode+0x1>
 3b2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <mode>
 3b6:	ff ef       	ldi	r31, 0xFF	; 255
 3b8:	26 e7       	ldi	r18, 0x76	; 118
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	f1 50       	subi	r31, 0x01	; 1
 3be:	20 40       	sbci	r18, 0x00	; 0
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <main+0x122>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <main+0x12c>
 3c6:	00 00       	nop
 3c8:	be cf       	rjmp	.-132    	; 0x346 <main+0xac>
				break;

			case PWM_Rotary:
				
				// Blink LED
				Mode_Blink(PWM_Rotary+1);
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 8b 00 	call	0x116	; 0x116 <Mode_Blink>
				DutyCycle = 1;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <DutyCycle+0x1>
 3da:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <DutyCycle>
				OCR1A = DutyCycle;
 3de:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 3e2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 3e6:	f8 01       	movw	r30, r16
 3e8:	91 83       	std	Z+1, r25	; 0x01
 3ea:	80 83       	st	Z, r24
				OCR1B = DutyCycle;
 3ec:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 3f0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 3f4:	99 83       	std	Y+1, r25	; 0x01
 3f6:	88 83       	st	Y, r24

				while (!PinState())
 3f8:	0e 94 53 00 	call	0xa6	; 0xa6 <PinState>
 3fc:	89 2b       	or	r24, r25
 3fe:	e1 f3       	breq	.-8      	; 0x3f8 <main+0x15e>
				{
					//_delay_ms(5);
				}
				++mode;
 400:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <mode>
 404:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <mode+0x1>
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <mode+0x1>
 40e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <mode>
 412:	ff ef       	ldi	r31, 0xFF	; 255
 414:	26 e7       	ldi	r18, 0x76	; 118
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	f1 50       	subi	r31, 0x01	; 1
 41a:	20 40       	sbci	r18, 0x00	; 0
 41c:	80 40       	sbci	r24, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop
 424:	90 cf       	rjmp	.-224    	; 0x346 <main+0xac>
				break;

			case BLINK:
			
				// Blink LED
				Mode_Blink(BLINK+1);
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 8b 00 	call	0x116	; 0x116 <Mode_Blink>
 42e:	9f ef       	ldi	r25, 0xFF	; 255
 430:	e7 ee       	ldi	r30, 0xE7	; 231
 432:	f3 e0       	ldi	r31, 0x03	; 3
 434:	91 50       	subi	r25, 0x01	; 1
 436:	e0 40       	sbci	r30, 0x00	; 0
 438:	f0 40       	sbci	r31, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
 440:	26 c0       	rjmp	.+76     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>

				_delay_ms(80);
				while(!PinState())
				{
					DutyCycle += Speed;
 442:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Speed>
 446:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <Speed+0x1>
 44a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 44e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 452:	82 0f       	add	r24, r18
 454:	93 1f       	adc	r25, r19
 456:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <DutyCycle+0x1>
 45a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <DutyCycle>
					if (DutyCycle > 0x03ff) DutyCycle = 0;
 45e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 462:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 466:	81 15       	cp	r24, r1
 468:	94 40       	sbci	r25, 0x04	; 4
 46a:	20 f0       	brcs	.+8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 46c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <DutyCycle+0x1>
 470:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <DutyCycle>
					OCR1A = DutyCycle;
 474:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 478:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 47c:	f8 01       	movw	r30, r16
 47e:	91 83       	std	Z+1, r25	; 0x01
 480:	80 83       	st	Z, r24
					OCR1B = DutyCycle;
 482:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DutyCycle>
 486:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <DutyCycle+0x1>
 48a:	99 83       	std	Y+1, r25	; 0x01
 48c:	88 83       	st	Y, r24
			
				// Blink LED
				Mode_Blink(BLINK+1);

				_delay_ms(80);
				while(!PinState())
 48e:	0e 94 53 00 	call	0xa6	; 0xa6 <PinState>
 492:	89 2b       	or	r24, r25
 494:	b1 f2       	breq	.-84     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
					DutyCycle += Speed;
					if (DutyCycle > 0x03ff) DutyCycle = 0;
					OCR1A = DutyCycle;
					OCR1B = DutyCycle;
				}
				++mode;
 496:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <mode>
 49a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <mode+0x1>
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <mode+0x1>
 4a4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <mode>
 4a8:	ff ef       	ldi	r31, 0xFF	; 255
 4aa:	26 e7       	ldi	r18, 0x76	; 118
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	f1 50       	subi	r31, 0x01	; 1
 4b0:	20 40       	sbci	r18, 0x00	; 0
 4b2:	80 40       	sbci	r24, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
 4ba:	45 cf       	rjmp	.-374    	; 0x346 <main+0xac>

000004bc <_PWM_16>:
#include "PWM.h"

void _PWM_16()
{
	// Set PB1, PB2 as output
	DDRB |= (1 << DDB1);
 4bc:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1 << DDB2);
 4be:	22 9a       	sbi	0x04, 2	; 4

	// Set inverting mode for both pins
	TCCR1A |= (1 << COM1A0) | (1 << COM1A1);
 4c0:	e0 e8       	ldi	r30, 0x80	; 128
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	80 6c       	ori	r24, 0xC0	; 192
 4c8:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B0) | (1 << COM1B1);
 4ca:	80 81       	ld	r24, Z
 4cc:	80 63       	ori	r24, 0x30	; 48
 4ce:	80 83       	st	Z, r24

	// Mode 7 Fast PWM, TOP = 1023
	TCCR1A |= (1 << WGM10) | (1 << WGM11);
 4d0:	80 81       	ld	r24, Z
 4d2:	83 60       	ori	r24, 0x03	; 3
 4d4:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12);
 4d6:	e1 e8       	ldi	r30, 0x81	; 129
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	88 60       	ori	r24, 0x08	; 8
 4de:	80 83       	st	Z, r24
	// Initialize the duty cycle to 50%
	//OCR1A = (0x03ff/2);
	//OCR1B = (0x03ff/2);

	// No prescaling | Start the timer
	TCCR1B |= (1 << CS10) | (0 << CS11);
 4e0:	80 81       	ld	r24, Z
 4e2:	81 60       	ori	r24, 0x01	; 1
 4e4:	80 83       	st	Z, r24
 4e6:	08 95       	ret

000004e8 <rotary_init>:
	{R_CCW_NEXT, R_CCW_FINAL, R_CCW_BEGIN, R_START},
};

void rotary_init(uint pin1, uint pin2) {
	//Enable internal pull-up
	PORTD |= (1 << PORTD2) | (1 << PORTD3);
 4e8:	8b b1       	in	r24, 0x0b	; 11
 4ea:	8c 60       	ori	r24, 0x0C	; 12
 4ec:	8b b9       	out	0x0b, r24	; 11

	// Initialize state.
	state = R_START;
 4ee:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <state>

	// Enable interrupts for encoder
	PCICR |= (1 << PCIE2);
 4f2:	e8 e6       	ldi	r30, 0x68	; 104
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	84 60       	ori	r24, 0x04	; 4
 4fa:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT18) | (1 << PCINT19);
 4fc:	ed e6       	ldi	r30, 0x6D	; 109
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	8c 60       	ori	r24, 0x0C	; 12
 504:	80 83       	st	Z, r24
 506:	08 95       	ret

00000508 <rotary_process>:

unsigned char rotary_process()
{
	unsigned char i, j;

	if((PIND&(1<<PIND3)))
 508:	29 b1       	in	r18, 0x09	; 9
	}
	else{
		i = 0;
	}

	if((PIND&(1<<PIND2)))
 50a:	39 b1       	in	r19, 0x09	; 9

	// Get state of input pins
	unsigned char pinstate = (j << 1) | (i);

	// Find state
	state = ttable[state & 0xf][pinstate];
 50c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <state>
 510:	ef 70       	andi	r30, 0x0F	; 15
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	32 fb       	bst	r19, 2
 516:	88 27       	eor	r24, r24
 518:	80 f9       	bld	r24, 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	23 fb       	bst	r18, 3
 522:	99 27       	eor	r25, r25
 524:	90 f9       	bld	r25, 0
 526:	89 2b       	or	r24, r25
 528:	ee 0f       	add	r30, r30
 52a:	ff 1f       	adc	r31, r31
 52c:	ee 0f       	add	r30, r30
 52e:	ff 1f       	adc	r31, r31
 530:	ee 5f       	subi	r30, 0xFE	; 254
 532:	fe 4f       	sbci	r31, 0xFE	; 254
 534:	e8 0f       	add	r30, r24
 536:	f1 1d       	adc	r31, r1
 538:	80 81       	ld	r24, Z
 53a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>

	return (state & 0x30);
}
 53e:	80 73       	andi	r24, 0x30	; 48
 540:	08 95       	ret

00000542 <init_button>:

// Handle encoder's button
void init_button()
{
	// PD4 as input
	DDRD |= (0 << DDD4);
 542:	8a b1       	in	r24, 0x0a	; 10
 544:	8a b9       	out	0x0a, r24	; 10

	// Enable Pull-up on PD4
	PORTD |= (1 << PORTD4);
 546:	5c 9a       	sbi	0x0b, 4	; 11
 548:	08 95       	ret

0000054a <_exit>:
 54a:	f8 94       	cli

0000054c <__stop_program>:
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stop_program>
